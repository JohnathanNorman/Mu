// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

// Package set creates a Int64Set data structure for the int64 type
package main

import "sync"

// Int64Set the set of Int64s
type Int64Set struct {
	items map[int64]bool
	lock  sync.RWMutex
}

// Add adds a new element to the Set. Returns a pointer to the Set.
func (s *Int64Set) Add(t int64) *Int64Set {
	s.lock.Lock()
	defer s.lock.Unlock()
	if s.items == nil {
		s.items = make(map[int64]bool)
	}
	_, ok := s.items[t]
	if !ok {
		s.items[t] = true
	}
	return s
}

// Clear removes all elements from the Set
func (s *Int64Set) Clear() {
	s.lock.Lock()
	defer s.lock.Unlock()
	s.items = make(map[int64]bool)
}

// Delete removes the int64 from the Set and returns Has(Int64)
func (s *Int64Set) Delete(item int64) bool {
	s.lock.Lock()
	defer s.lock.Unlock()
	_, ok := s.items[item]
	if ok {
		delete(s.items, item)
	}
	return ok
}

// Has returns true if the Set contains the int64
func (s *Int64Set) Has(item int64) bool {
	s.lock.RLock()
	defer s.lock.RUnlock()
	_, ok := s.items[item]
	return ok
}

// Items returns the Items stored
func (s *Int64Set) Items() []int64 {
	s.lock.RLock()
	defer s.lock.RUnlock()
	items := []int64{}
	for i := range s.items {
		items = append(items, i)
	}
	return items
}

// Size returns the size of the set
func (s *Int64Set) Size() int {
	s.lock.RLock()
	defer s.lock.RUnlock()
	return len(s.items)
}

// Union returns a new set with elements from both
// the given sets
func (s *Int64Set) Union(s2 *Int64Set) *Int64Set {
	s3 := Int64Set{}
	s3.items = make(map[int64]bool)
	s.lock.RLock()
	for i := range s.items {
		s3.items[i] = true
	}
	s.lock.RUnlock()
	s2.lock.RLock()
	for i := range s2.items {
		_, ok := s3.items[i]
		if !ok {
			s3.items[i] = true
		}
	}
	s2.lock.RUnlock()
	return &s3
}

// Intersection returns a new set with elements that exist in
// both sets
func (s *Int64Set) Intersection(s2 *Int64Set) *Int64Set {
	s3 := Int64Set{}
	s3.items = make(map[int64]bool)
	s.lock.RLock()
	s2.lock.RLock()
	defer s.lock.RUnlock()
	defer s2.lock.RUnlock()
	for i := range s2.items {
		_, ok := s.items[i]
		if ok {
			s3.items[i] = true
		}
	}
	return &s3
}

// Difference returns a new set with all the elements that
// exist in the first set and don't exist in the second set
func (s *Int64Set) Difference(s2 *Int64Set) *Int64Set {
	s3 := Int64Set{}
	s3.items = make(map[int64]bool)
	s.lock.RLock()
	s2.lock.RLock()
	defer s.lock.RUnlock()
	defer s2.lock.RUnlock()
	for i := range s.items {
		_, ok := s2.items[i]
		if !ok {
			s3.items[i] = true
		}
	}
	return &s3
}

// Subset returns true if s is a subset of s2
func (s *Int64Set) Subset(s2 *Int64Set) bool {
	s.lock.RLock()
	s2.lock.RLock()
	defer s.lock.RUnlock()
	defer s2.lock.RUnlock()
	for i := range s.items {
		_, ok := s2.items[i]
		if !ok {
			return false
		}
	}
	return true
}
